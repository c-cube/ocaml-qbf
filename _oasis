OASISFormat: 0.4
Name:        qbf
Version:     0.2
Homepage:    https://github.com/c-cube/ocaml-qbf
Authors:     Simon Cruanes
Maintainers: Simon Cruanes <simon.cruanes@inria.fr>
License:     BSD-3-clause
LicenseFile: LICENSE
Plugins:     META (0.4), DevFiles (0.4)
BuildType:   ocamlbuild (0.4)
BuildTools:  ocamlbuild

Synopsis:   QBF solving in OCaml, including bindings to solvers
Description:
    Ocaml-qbf provides a unified API to several QBF solvers, along with
    common types for formulas, QCNF and literals and operations such
    as simplifications and reduction to CNF.

     It packs:
     - a binding to quantor, which is shipped with the library
     - a binding to Depqbf

Flag "quantor"
  Description:          build and install the binding "qbf.quantor"
  Default:              true

Flag "random"
  Description:          build and install random generators (depends on "random-generator")
  Default:              false

Flag "depqbf"
  Description:          build and install bindings to DEPQBF (requires it to be installed)
  Default:              false

Library "qbf"
  Path:                 src/
  Modules:              Qbf

Library "qbf-quantor"
  Path:                 src/quantor/
  Modules:              Quantor
  CSources:             quantor_stubs.c, quantor_stubs.h
  CCOpt:                -O2 -Wextra -Wno-unused-parameter -I../libs/quantor-3.2/
  CCLib:                -L. -lquantor -lpicosat
  FindlibName:          quantor
  FindlibParent:        qbf
  Build$:               flag(quantor)
  Install$:             flag(quantor)
  BuildDepends:         qbf

# magiiiic so that '-lquantor' works
if flag(quantor)
    PreBuildCommand:    make deps
    PostCleanCommand:   make clean-deps
    PostInstallCommand: make install-deps

Library "qbf-depqbf"
  Path:                 src/depqbf/
  Modules:              Depqbf
  BuildDepends:         qbf, ctypes, ctypes.foreign
  FindlibName:          depqbf
  FindlibParent:        qbf
  Build$:               flag(depqbf)
  Install$:             flag(depqbf)
  if system(macosx)
    CCLib:              -force_load /usr/local/lib/libqdpll.a
  else
    CCLib:              -L/usr/local/lib -lqdpll

Library "qbf-random"
  Path:                 src/random/
  Modules:              QbfRandom
  FindlibName:          random
  FindlibParent:        qbf
  Build$:               flag(random)
  Install$:             flag(random)
  BuildDepends:         qbf, random-generator

# Because we generally run the tests without installing the qbf.quantor library,
# we must make sure we do not use the shared dllqbf-quantor_stub.so; to force
# the use of the static libqbf-quantor_stub.a, we just pass 'Custom: true'.
Executable "test_quantor"
  Build$:         flag(tests) && flag(quantor)
  Path:           tests/quantor
  Install:        false
  BuildDepends:   qbf, qbf.quantor, oUnit
  MainIs:         test_quantor.ml
  Custom:         true

Executable "test_depqbf"
  Build$:         flag(tests) && flag(depqbf)
  Path:           tests/depqbf
  Install:        false
  BuildDepends:   qbf, qbf.depqbf, oUnit
  MainIs:         test_depqbf.ml
  Custom:         true

Test test_depqbf
  Run$:           flag(tests) && flag(depqbf)
  Command:        $test_depqbf
  TestTools:      test_depqbf
  WorkingDirectory: .

Test test_quantor
  Run$:           flag(tests) && flag(quantor)
  Command:        $test_quantor
  TestTools:      test_quantor
  WorkingDirectory: .

Document qbf
  Title:                Qbf docs
  Type:                 ocamlbuild (0.3)
  BuildTools+:          ocamldoc
  Install:              true
  XOCamlbuildPath:      .
  XOCamlbuildLibraries: qbf

Document "qbf-quantor"
  Title:                Qbf bindings to Quantor documentation
  Type:                 ocamlbuild (0.3)
  BuildTools+:          ocamldoc
  Install:              true
  XOCamlbuildPath:      .
  XOCamlbuildLibraries: qbf.quantor
  Build$:               flag(quantor)
  Install$:             flag(quantor)

SourceRepository head
  Type: git
  Location: https://github.com/c-cube/ocaml-qbf.git
  Browser: https://github.com/c-cube/ocaml-qbf
